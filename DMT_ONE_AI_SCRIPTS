#DMT_CDM_SOURCE#
import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_CDM_SOURCE
"""


cur.execute(delete_sql)

insert_sql = """
INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_CDM_SOURCE"
(
CDM_SOURCE_NAME,
CDM_SOURCE_ABBREVIATION,
CDM_HOLDER,
SOURCE_DESCRIPTION,
SOURCE_DOCUMENTATION_REFERENCE,
CDM_ETL_REFERENCE,
SOURCE_RELEASE_DATE,
CDM_RELEASE_DATE,
CDM_VERSION

)


(SELECT 
CDM_SOURCE_NAME,
CDM_SOURCE_ABBREVIATION,
CDM_HOLDER,
SOURCE_DESCRIPTION,
SOURCE_DOCUMENTATION_REFERENCE,
CDM_ETL_REFERENCE,
SOURCE_RELEASE_DATE,
CDM_RELEASE_DATE,
CDM_VERSION FROM DF_RWD_DEV.PRJ_MDC_DWH.DWH_CDM_SOURCE)"""


cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()

#DMT_PATIENT_MASTER#
 
import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_PATIENT_MASTER
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PATIENT_MASTER"
(

PERSON_ID,
CLINIC_ID,
GENDER,
BIRTHYEAR,
AGE,
AGE_GROUP,
HEIGHT,
WEIGHT,
ETHNICITY,
COUNTRY,
CREATED_DATE,
MODIFIED_DATE,
INSULINEXPERIENCE,
LASTLOGIN,
LOAD_DT,
CONSENT,
STATUS,
SOURCE
)

(SELECT 
    PERSON_ID,
    CLINIC_ID,
    CASE WHEN GENDER IS NULL  THEN 'Unknown' ELSE GENDER END AS GENDER,
    BIRTHYEAR,
    AGE,
    AGE_GROUP, 
    HEIGHT,
    WEIGHT,
    ETHNICITY,
    COUNTRY,
    TO_DATE(CREATED_DATE) AS CREATED_DATE,
    TO_DATE(MODIFIED_DATE) AS MODIFIED_DATE,
	CASE 
	WHEN INSULINEXPERIENCE IS NULL THEN 'Unknown' ELSE INSULINEXPERIENCE END AS INSULINEXPERIENCE,
    TO_DATE(LASTLOGIN) AS LASTLOGIN,
    LAST_DAY(DATEADD(MONTH, -1, CURRENT_DATE)) AS LOAD_DT,
	INITCAP(CONSENT) AS CONSENT,
    INITCAP(STATUS) AS STATUS,
    SOURCE
FROM DF_RWD_DEV.PRJ_MDC_DWH.DWH_PATIENT_MASTER)"""

cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()

#DMT_CLINIC_MASTER#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_CLINIC_MASTER
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_CLINIC_MASTER"
(

    CLINIC_ID,
	CITY,
	STATE,
	COUNTRY,
	ZIP_CODE, 
	STATUS, 
	CREATED_DATE,
	MODIFIED_DATE,
    REGION,
    CLINIC_CD,
    SOURCE

)


(select 
	CLINIC_ID,
	CITY,
	STATE,
	COUNTRY,
	ZIP_CODE, 
	STATUS, 
	TO_DATE(CREATED_DATE) AS CREATED_DATE,
	TO_DATE(MODIFIED_DATE) AS MODIFIED_DATE,
    REGION,
    CLINIC_CD,
    SOURCE
 from DF_RWD_DEV.PRJ_MDC_DWH.DWH_CLINIC_MASTER)"""
 
cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()

#DMT_PATIENT_STATUS#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_PATIENT_STATUS
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PATIENT_STATUS"
(

PERSON_ID,
CONSENT,
LAST_LOGIN,
ENROLLED_FROM,
ACTIVATED_FROM,
DROPPED_FROM

)


(Select P.PERSON_ID,CONSENT,LASTLOGIN,
MAX(P.CREATED_DATE) AS ENROLLED_FROM,
MIN(E.ACTIVATED_DATE) as ACTIVATED_FROM,
MAX(LASTLOGIN) + 14 as DROPPED_FROM
from "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PATIENT_MASTER" P
FULL OUTER JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_ENGAGEMENT_ANALYSIS" E
ON P.PERSON_ID = E.PERSON_ID
where P.PERSON_ID IS NOT NULL
group by P.PERSON_ID,CONSENT,LASTLOGIN)"""

cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()


#DMT_USER_MASTER#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_USER_MASTER
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_USER_MASTER"

(

	USER_ID,
	CLINIC_ID,
	COUNTRY,
	CREATED_DATE,
	MODIFIED_DATE,
	STATUS,
	SOURCE,
	TITLE,
	LANGUAGE,
	CATEGORY,
	ISCLINICADMIN,
	CANREADPII,
	CANMANAGEPII,
	CANREADCLINICAL,
	CANMANAGECLINICAL


)

(SELECT 

	USER_ID,
	CLINIC_ID,
	COUNTRY,
	TO_DATE(CREATED_DATE) AS CREATED_DATE,
	TO_DATE(MODIFIED_DATE) AS MODIFIED_DATE,
	STATUS,
	SOURCE,
	TITLE,
	LANGUAGE,
	CATEGORY,
	ISCLINICADMIN,
	CANREADPII,
	CANMANAGEPII,
	CANREADCLINICAL,
	CANMANAGECLINICAL FROM DF_RWD_DEV.PRJ_MDC_DWH.DWH_USER_MASTER)"""

cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()
 
 #DMT_DATE#
 
import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_DATE
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_DATE" (
    date_id,
    year,
    quarter,
    month,
	yearmonth,
    month_name,
    day,
    day_of_week,
    day_name,
    is_weekend
)
  
WITH RECURSIVE dates AS (
    SELECT DATE('2018-08-01') AS date_id
    UNION ALL
    SELECT DATEADD(day, 1, date_id) FROM dates WHERE date_id < (
    SELECT MAX(LASTLOGIN)
    FROM "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PATIENT_MASTER"
)
)
SELECT
    date_id,
    YEAR(date_id) AS year,
    QUARTER(date_id) AS quarter,
    MONTH(date_id) AS month,
    CONCAT(year||'-'||INITCAP(TO_CHAR(date_id, 'Mon'))) AS yearmonth,
    INITCAP(TO_CHAR(date_id, 'Mon')) AS month_name,
    DAY(date_id) AS day,
    DAYOFWEEK(date_id) - 1 AS day_of_week,
    TO_CHAR(date_id, 'Day') AS day_name,
    CASE WHEN DAYOFWEEK(date_id) IN (1, 7) THEN TRUE ELSE FALSE END AS is_weekend
FROM
    dates"""
    
cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()

#DMT_OBSERVATION#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_OBSERVATION
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_OBSERVATION"

(

PERSON_ID,
OBSERVATION_ID,
ENGAGEMENT_ID,
OBSERVATION_DATE,
DOSEPLAN_ACTIVATION,
DOSEPLAN_ACTIVATION_UNIT,
HBA1C,
HBA1C_UNIT,
DOSE_SUGGESTION,
DOSE_SUGGESTION_UNIT,
WEIGHT,
WEIGHT_UNIT,
DOSE,
DOSE_UNIT,
FBGL,
FBGL_UNIT,
BGL,
BGL_UNIT,
GLUCOMETER_READING,
GLUCOMETER_READING_UNIT,
FASTING,
HYPO,
SUGGESTED_DOSE,
SUGGESTED_REASON,
STATUS,
SOURCE

)

(SELECT 

PERSON_ID,
OBSERVATION_ID,
ENGAGEMENT_ID,
TO_DATE(OBSERVATION_DATE) AS OBSERVATION_DATE,
TO_NUMBER(DOSEPLAN_ACTIVATION) AS DOSEPLAN_ACTIVATION,
DOSEPLAN_ACTIVATION_UNIT,
TO_NUMBER(HBA1C) AS HBA1C,
HBA1C_UNIT,
TO_NUMBER(DOSE_SUGGESTION) AS DOSE_SUGGESTION,
DOSE_SUGGESTION_UNIT,
TO_NUMBER(WEIGHT) AS WEIGHT,
WEIGHT_UNIT,
TO_NUMBER(DOSE) AS DOSE,
DOSE_UNIT,
TO_NUMBER(FBGL) AS FBGL,
FBGL_UNIT,
TO_NUMBER(BGL) AS BGL,
BGL_UNIT,
TO_NUMBER(GLUCOMETER_READING) AS GLUCOMETER_READING,
GLUCOMETER_READING_UNIT,
TO_NUMBER(FASTING) AS FASTING,
TO_NUMBER(HYPO) AS HYPO,
TO_NUMBER(SUGGESTED_DOSE) AS SUGGESTED_DOSE,
SUGGESTED_REASON,
STATUS,
SOURCE

FROM DF_RWD_DEV.PRJ_MDC_DWH.DWH_OBSERVATION)"""

cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()

#DMT_ENGAGEMENT#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_ENGAGEMENT
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_ENGAGEMENT"
    
(
PERSON_ID , 
ENGAGEMENT_ID , 
USER_ID , 
CREATED_DATE , 
ACTIVATED_DATE , 
DEACTIVATED_DATE , 
MINBGVALUE1 , 
DOSECHANGE1 , 
CHANGEMETHOD1 , 
MINBGVALUE2 , 
DOSECHANGE2 , 
CHANGEMETHOD2 , 
MINBGVALUE3 , 
DOSECHANGE3 , 
CHANGEMETHOD3 , 
MINBGVALUE4 , 
DOSECHANGE4 , 
CHANGEMETHOD4 , 
MINBGVALUE5 , 
DOSECHANGE5 , 
CHANGEMETHOD5 , 
MINBGVALUE6 , 
DOSECHANGE6 , 
CHANGEMETHOD6 , 
MINBGVALUE7 , 
DOSECHANGE7 , 
CHANGEMETHOD7 , 
TITRATION_FREQUENCY , 
STARTING_DOSE , 
MAXMIMUM_DOSE , 
DAILY_DOSE_TIME , 
DAILY_READING_TIME , 
HYPO_BG_THRESHOLD , 
HYPO_OPTIONS , 
BGLCALCULATION , 
TITRATION_PAIRS , 
DEACTIVATED_BY_USERID , 
TRAINED_DATE , 
TRAINED_BY , 
EXPIRATION_DATE , 
REASON_ENDED , 
CREATOR_ID , 
DRUG_NAME , 
START_DATE , 
EXPIRY_DATE , 
DISCONTINUE_REASON , 
STATUS , 
SOURCE 
 )
    (SELECT 
	PERSON_ID, 
	ENGAGEMENT_ID,
	USER_ID, 
	TO_DATE(CREATED_DATE) AS CREATED_DATE,
	TO_DATE(ACTIVATED_DATE) AS ACTIVATED_DATE,
	TO_DATE(DEACTIVATED_DATE) AS DEACTIVATED_DATE,
	TO_NUMBER(MINBGVALUE1) AS MINBGVALUE1,
	TO_NUMBER(DOSECHANGE1) AS  DOSECHANGE1,
	CHANGEMETHOD1,
	TO_NUMBER(MINBGVALUE2) AS MINBGVALUE2,
	TO_NUMBER(DOSECHANGE2) AS DOSECHANGE2, 
	CHANGEMETHOD2,
	TO_NUMBER(MINBGVALUE3) AS MINBGVALUE3,
	TO_NUMBER(DOSECHANGE3) AS DOSECHANGE3,
	CHANGEMETHOD3,
	TO_NUMBER(MINBGVALUE4) AS MINBGVALUE4,
	TO_NUMBER(DOSECHANGE4) AS DOSECHANGE4 ,
	CHANGEMETHOD4,
	TO_NUMBER(MINBGVALUE5) AS MINBGVALUE5,
	TO_NUMBER(DOSECHANGE5) AS DOSECHANGE5, 
	CHANGEMETHOD5,
	TO_NUMBER(MINBGVALUE6) AS MINBGVALUE6,
	TO_NUMBER(DOSECHANGE6) AS DOSECHANGE6,
	CHANGEMETHOD6,
	TO_NUMBER(MINBGVALUE7) AS MINBGVALUE7,
	TO_NUMBER(DOSECHANGE7) AS DOSECHANGE7,
	CHANGEMETHOD7,
	TO_NUMBER(TITRATION_DAYS) AS TITRATION_FREQUENCY,
	TO_NUMBER(STARTING_DOSE) AS STARTING_DOSE,
	TO_NUMBER(MAXMIMUM_DOSE) AS  MAXMIMUM_DOSE,
	TO_NUMBER(DAILY_DOSE_TIME ) AS DAILY_DOSE_TIME,
	TO_NUMBER(DAILY_READING_TIME) AS  DAILY_READING_TIME,
	TO_NUMBER(HYPO_BG_THRESHOLD) AS HYPO_BG_THRESHOLD,
	HYPO_OPTIONS,
	BGL_CALCULATION ,
	TO_NUMBER(TITRATION_PAIRS) AS TITRATION_PAIRS,
	DEACTIVATED_BY_USERID,
	TO_DATE(TRAINING_DATE) AS TRAINED_DATE,
	TRAINER_ID,
	TO_DATE(EXPIRATION_DATE) AS EXPIRATION_DATE,
	REASON_ENDED, 
	USER_ID,
	DRUG_NAME,
	TO_DATE(ACTIVATED_DATE ) AS START_DATE,
	TO_DATE(EXPIRATION_DATE ) AS EXPIRY_DATE,
	REASON_ENDED AS DISCONTINUE_REASON,
	STATUS,
	SOURCE 
FROM DF_RWD_DEV.PRJ_MDC_DWH.DWH_ENGAGEMENT)"""

cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()

#DMT_ENGAGEMENT_ANALYSIS#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_ENGAGEMENT_ANALYSIS
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_ENGAGEMENT_ANALYSIS"
(
PERSON_ID ,
ENGAGEMENT_ID ,
USER_ID ,
DRUG_NAME ,
CREATED_DATE ,
ACTIVATED_DATE ,
DEACTIVATED_DATE ,
TRAINED_DATE ,
REASON_ENDED ,
PRODUCT ,
MIN_BG , 
MAX_BG , 
SOURCE  


)

(SELECT DISTINCT
PERSON_ID,
ENGAGEMENT_ID,
USER_ID,
DRUG_NAME,
TO_DATE(CREATED_DATE) AS CREATED_DATE,
TO_DATE(ACTIVATED_DATE) AS ACTIVATED_DATE,
TO_DATE(DEACTIVATED_DATE) AS DEACTIVATED_DATE,
TO_DATE(TRAINING_DATE) AS TRAINED_DATE,
REASON_ENDED,
CASE
        WHEN LTRIM(RTRIM(UPPER(DRUG_NAME))) LIKE 'LANT%' THEN 'Lantus'
        WHEN LTRIM(RTRIM(UPPER(DRUG_NAME))) LIKE 'TOUJ%' THEN 'Toujeo'
        WHEN LTRIM(RTRIM(UPPER(DRUG_NAME))) LIKE 'ABAS%' THEN 'Abasaglar'
        WHEN LTRIM(RTRIM(UPPER(DRUG_NAME))) LIKE 'TRES%' THEN 'Tresiba'
        WHEN LTRIM(RTRIM(UPPER(DRUG_NAME))) LIKE 'INS%' THEN 'Insulina Glargina'
        WHEN LTRIM(RTRIM(UPPER(DRUG_NAME))) LIKE 'LEVE%' THEN 'Levemir'
        WHEN LTRIM(RTRIM(UPPER(DRUG_NAME))) LIKE 'SOLIQU%' THEN 'Soliqua'
    ELSE LTRIM(RTRIM(DRUG_NAME)) END AS PRODUCT,
CASE
        WHEN DOSECHANGE1 = 0.00 THEN MINBGVALUE1
        WHEN DOSECHANGE2 = 0.00 THEN MINBGVALUE2
        WHEN DOSECHANGE3 = 0.00 THEN MINBGVALUE3
        WHEN DOSECHANGE4 = 0.00 THEN MINBGVALUE4
        WHEN DOSECHANGE5 = 0.00 THEN MINBGVALUE5
        WHEN DOSECHANGE6 = 0.00 THEN MINBGVALUE6
        WHEN DOSECHANGE7 = 0.00 THEN MINBGVALUE7
    END AS MIN_BG,
    CASE
        WHEN DOSECHANGE1 = 0.00 THEN MINBGVALUE2
        WHEN DOSECHANGE2 = 0.00 THEN MINBGVALUE3
        WHEN DOSECHANGE3 = 0.00 THEN MINBGVALUE4
        WHEN DOSECHANGE4 = 0.00 THEN MINBGVALUE5
        WHEN DOSECHANGE5 = 0.00 THEN MINBGVALUE6
        WHEN DOSECHANGE6 = 0.00 THEN MINBGVALUE7
    END AS MAX_BG,
    SOURCE
    FROM DF_RWD_DEV.PRJ_MDC_DWH.DWH_ENGAGEMENT)"""
    
cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()
    
#DMT_PATIENT_ANALYSIS#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_PATIENT_ANALYSIS
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PATIENT_ANALYSIS"

(PERSON_ID,
GENDER,
AGE,
AGE_GROUP,
P_COUNTRY,
P_CREATED_DATE,
P_MODIFIED_DATE,
INSULINEXPERIENCE,
LASTLOGIN,
LOAD_DT,
CLINIC_ID,
C_COUNTRY,
C_CREATED_DATE,
C_MODIFIED_DATE,
REGION,
CLINIC_CD,
ENGAGEMENT_ID,
DRUG_NAME,
PRODUCT,
MIN_BG,
MAX_BG,
CPKEY,
OBSERVATION_ID,
OBSERVATION_DATE,
DOSE_SUGGESTION,
DOSE,
FBGL,
HYPO,
SUGGESTED_DOSE,
PATIENT_STATUS,
TOUCHED,
REACHED,
SUSTAINED,
ENROLLED,
ACTIVE,
DROPPED,
NO_CONSENT,
YTST,
TITRATED,
STILL_TITRATING,
NOT_TITRATING
)

SELECT *,
CASE
WHEN ENROLLED = 'YES' THEN 'YES' ELSE 'NO' END AS YTST,
CASE 
WHEN ACTIVE = 'YES' AND TOUCHED = 'YES' THEN 'YES'
WHEN DROPPED = 'YES' AND TOUCHED = 'YES' THEN 'YES' ELSE 'NO' END AS TITRATED,
CASE 
WHEN ACTIVE = 'YES' AND TOUCHED = 'NO' THEN 'YES' ELSE 'NO' END AS STILL_TITRATING,
CASE 
WHEN DROPPED = 'YES' AND TOUCHED = 'NO' THEN 'YES' ELSE 'NO' END AS NOT_TITRATING
FROM
(SELECT *,
CASE
WHEN PATIENT_STATUS = 'Enrolled' THEN 'YES' ELSE 'NO' END AS ENROLLED,
CASE
WHEN PATIENT_STATUS = 'Active' THEN 'YES' ELSE 'NO' END AS ACTIVE,
CASE
WHEN PATIENT_STATUS = 'Dropped' THEN 'YES' ELSE 'NO' END AS DROPPED,
CASE
WHEN PATIENT_STATUS = 'No Consent' THEN 'YES' ELSE 'NO' END AS NO_CONSENT,
FROM (WITH TouchedValues AS
(SELECT
P.PERSON_ID,P.GENDER,P.AGE,P.AGE_GROUP,P.COUNTRY AS P_COUNTRY,P.CREATED_DATE AS P_CREATED_DATE,P.MODIFIED_DATE AS P_MODIFIED_DATE,P.INSULINEXPERIENCE,P.LASTLOGIN,P.LOAD_DT,
C.CLINIC_ID,C.COUNTRY AS C_COUNTRY,C.CREATED_DATE AS C_CREATED_DATE,C.MODIFIED_DATE AS C_MODIFIED_DATE,C.REGION,C.CLINIC_CD,
--U.PERSON_ID AS USER_ID, U.CLINIC_ID AS U_CLINIC_ID,U.CREATED_DATE AS U_CREATED_DATE,U.MODIFIED_DATE AS U_MODIFIED_DATE,
E.ENGAGEMENT_ID,E.DRUG_NAME,E.PRODUCT,E.MIN_BG,E.MAX_BG,COALESCE(P.COUNTRY || '|' || E.PRODUCT, P.COUNTRY, E.PRODUCT) AS CPKEY,
O.OBSERVATION_ID,O.OBSERVATION_DATE,O.DOSE_SUGGESTION,O.DOSE,O.FBGL,O.HYPO,O.SUGGESTED_DOSE,


CASE
WHEN CONSENT = 'False' THEN 'No Consent'
WHEN CONSENT IS NULL AND P.CLINIC_ID IS NULL THEN 'No Consent' 
 
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is null THEN 'Enrolled'
--WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null THEN 'Enrolled'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and LASTLOGIN is null THEN 'Enrolled'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is null THEN 'Enrolled'
--WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null THEN 'Enrolled'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and LASTLOGIN is null THEN 'Enrolled'

WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'

WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped' END AS PATIENT_STATUS,

CASE
WHEN O.FBGL >= E.MIN_BG AND O.FBGL <= E.MAX_BG THEN 'YES' ELSE 'NO' END AS TOUCHED
FROM "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PATIENT_MASTER" P
FULL OUTER JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_CLINIC_MASTER" C
ON P.CLINIC_ID = C.CLINIC_ID
FULL OUTER JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_ENGAGEMENT_ANALYSIS" E
ON P.PERSON_ID = E.PERSON_ID
FULL OUTER JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_OBSERVATION" O
ON O.PERSON_ID = P.PERSON_ID AND E.ENGAGEMENT_ID = O.ENGAGEMENT_ID
--JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_USER_MASTER" U
--ON U.CLINIC_ID = C.CLINIC_ID
WHERE 
--P.PERSON_ID = '1ba1cf73206c174f93455b089bfaf0c2e5e3324fe507af7ca2e7ae6ab9423e98' AND 
O.FBGL IS NOT NULL),
ReachedValues AS (
SELECT *,
CASE 
WHEN LAG(TOUCHED, 2) OVER (PARTITION BY PERSON_ID ORDER BY OBSERVATION_DATE) = 'YES' AND 
     LAG(TOUCHED, 1) OVER (PARTITION BY PERSON_ID ORDER BY OBSERVATION_DATE) = 'YES' AND TOUCHED = 'YES' THEN 'YES' ELSE 'NO' END AS REACHED
FROM TouchedValues )
SELECT *,
CASE WHEN
SUM(CASE WHEN TOUCHED = 'YES' THEN 1 ELSE 0 END) OVER (PARTITION BY PERSON_ID ORDER BY OBSERVATION_DATE ROWS BETWEEN 9 PRECEDING AND CURRENT ROW) >= 7
AND
MAX(CASE WHEN REACHED = 'YES' THEN 1 ELSE 0 END) OVER (PARTITION BY PERSON_ID ORDER BY OBSERVATION_DATE ROWS BETWEEN 9 PRECEDING AND CURRENT ROW) = 1
THEN 'YES' ELSE 'NO' END AS SUSTAINED
FROM ReachedValues
      
UNION ALL
      
SELECT
P.PERSON_ID,P.GENDER,P.AGE,P.AGE_GROUP,P.COUNTRY AS P_COUNTRY,P.CREATED_DATE AS P_CREATED_DATE,P.MODIFIED_DATE AS P_MODIFIED_DATE,P.INSULINEXPERIENCE,P.LASTLOGIN,P.LOAD_DT,
C.CLINIC_ID,C.COUNTRY AS C_COUNTRY,C.CREATED_DATE AS C_CREATED_DATE,C.MODIFIED_DATE AS C_MODIFIED_DATE,C.REGION,C.CLINIC_CD,
--U.PERSON_ID AS USER_ID, U.CLINIC_ID AS U_CLINIC_ID,U.CREATED_DATE AS U_CREATED_DATE,U.MODIFIED_DATE AS U_MODIFIED_DATE,
E.ENGAGEMENT_ID,E.DRUG_NAME,E.PRODUCT,E.MIN_BG,E.MAX_BG,COALESCE(P.COUNTRY || '|' || E.PRODUCT, P.COUNTRY, E.PRODUCT) AS CPKEY,
O.OBSERVATION_ID,O.OBSERVATION_DATE,O.DOSE_SUGGESTION,O.DOSE,O.FBGL,O.HYPO,O.SUGGESTED_DOSE,

CASE
WHEN CONSENT = 'False' THEN 'No Consent'
WHEN CONSENT IS NULL AND P.CLINIC_ID IS NULL THEN 'No Consent' 
 
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is null THEN 'Enrolled'
--WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null THEN 'Enrolled'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and LASTLOGIN is null THEN 'Enrolled'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is null THEN 'Enrolled'
--WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null THEN 'Enrolled'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and LASTLOGIN is null THEN 'Enrolled'

WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) <= 14 THEN 'Active'

WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT = 'True' AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is not null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is not null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped'
WHEN CONSENT is null AND E.ENGAGEMENT_ID is not null and ACTIVATED_DATE is null and DEACTIVATED_DATE is null and DATEDIFF(Day, LASTLOGIN,LOAD_DT) > 14 THEN 'Dropped' END AS PATIENT_STATUS,

'' AS TOUCHED,
'' AS REACHED,
'' AS SUSTAINED
FROM "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PATIENT_MASTER" P
FULL OUTER JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_CLINIC_MASTER" C
ON P.CLINIC_ID = C.CLINIC_ID
FULL OUTER JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_ENGAGEMENT_ANALYSIS" E
ON P.PERSON_ID = E.PERSON_ID
FULL OUTER JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_OBSERVATION" O
ON O.PERSON_ID = P.PERSON_ID AND E.ENGAGEMENT_ID = O.ENGAGEMENT_ID
--JOIN "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_USER_MASTER" U
--ON U.CLINIC_ID = C.CLINIC_ID
WHERE 
--P.PERSON_ID = '1ba1cf73206c174f93455b089bfaf0c2e5e3324fe507af7ca2e7ae6ab9423e98' AND 
O.FBGL IS NULL
ORDER BY OBSERVATION_DATE ) A ) B"""

cur.execute(insert_sql)

delete_sql="""DELETE FROM "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PATIENT_ANALYSIS" WHERE PERSON_ID IS NULL AND CLINIC_ID IS NULL"""

 
cur.execute(delete_sql)


conn.commit()


cur.close()
conn.close()


#DMT_PRODUCT_MASTER#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_PRODUCT_MASTER
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_PRODUCT_MASTER"
(
PRODUCT,
PRODUCT_NAME
)
(SELECT DISTINCT 
CASE
        WHEN LTRIM(RTRIM(UPPER(E.DRUG_NAME))) LIKE 'LANT%' THEN 'Lantus'
        WHEN LTRIM(RTRIM(UPPER(E.DRUG_NAME))) LIKE 'TOUJ%' THEN 'Toujeo'
        WHEN LTRIM(RTRIM(UPPER(E.DRUG_NAME))) LIKE 'ABAS%' THEN 'Abasaglar'
        WHEN LTRIM(RTRIM(UPPER(E.DRUG_NAME))) LIKE 'TRES%' THEN 'Tresiba'
        WHEN LTRIM(RTRIM(UPPER(E.DRUG_NAME))) LIKE 'INS%' THEN 'Insulina Glargina'
        WHEN LTRIM(RTRIM(UPPER(E.DRUG_NAME))) LIKE 'LEVE%' THEN 'Levemir'
        WHEN LTRIM(RTRIM(UPPER(E.DRUG_NAME))) LIKE 'SOLIQU%' THEN 'Soliqua'
    ELSE LTRIM(RTRIM(E.DRUG_NAME)) END AS PRODUCT,
    DRUG_NAME AS PRODUCT_NAME FROM "DF_RWD_DEV"."PRJ_MDC_DWH"."DWH_ENGAGEMENT" E)"""
    
cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()

#DMT_TAGGING#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_TAGGING
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_TAGGING"
(
	PERSON_ID,
	OBSERVATION_ID,
	OBSERVATION_DATE,
	USERID,
	USER_CATEGORY,
	TAG_EVENT_NAME,
	OTHER
)

(SELECT 

	PERSON_ID,
	OBSERVATION_ID,
	TO_DATE(OBSERVATION_DATE) AS OBSERVATION_DATE,
	USERID,
	USER_CATEGORY,
	TAG_EVENT_NAME,
	OTHER FROM DF_RWD_DEV.PRJ_MDC_DWH.DWH_TAGGING)"""
    
cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()

#DMT_DOSEPLANTEMPLATE_MASTER#

import snowflake.connector
conn = snowflake.connector.connect(
    user='DF_RWD_DEV_PRJ_MDC_IICS_DEVELOPER',
    password='fo6AKi45VLq8kxxjyruKYq0',
    account='fg67397.eu-west-1',
    warehouse='DF_RWD_DEV_WH_PRJ_MDC',
    database='DF_RWD_DEV',
    schema='PRJ_MDC_DMT'
)


cur = conn.cursor()

delete_sql = """
DELETE FROM DMT_DOSEPLANTEMPLATE_MASTER
"""


cur.execute(delete_sql)

insert_sql = """INSERT INTO "DF_RWD_DEV"."PRJ_MDC_DMT"."DMT_DOSEPLANTEMPLATE_MASTER"
(DOSEPLANTEMPLATE_ID,
OWNER_ID,
CREATED,
MODIFIED,
MEDICATIONFIRST_VALUE,
BGL_CALCULATION,
HYPO_OPTIONS,
HYPO_BG_THRESHOLD,
PATIENT_ADHERENCE,
TITRATION_DAYS,
DESCRIPTION,
VERSION,
COUNTRY_CODE,
CATEGORY,
NAME,
MIN_BG_VALUE1,
DOSE_CHANGE1,
CHANGE_METHOD1,
MIN_BG_VALUE2,
DOSE_CHANGE2,
CHANGE_METHOD2,
MIN_BG_VALUE3,
DOSE_CHANGE3,
CHANGE_METHOD3,
MIN_BG_VALUE4,
DOSE_CHANGE4,
CHANGE_METHOD4,
MIN_BG_VALUE5,
DOSE_CHANGE5,
CHANGE_METHOD5,
MIN_BG_VALUE6,
DOSE_CHANGE6,
CHANGE_METHOD6,
MIN_BG_VALUE7,
DOSE_CHANGE7,
CHANGE_METHOD7,
STATUS,
SOURCE

)


(SELECT

DOSEPLANTEMPLATE_ID,
OWNER_ID,
TO_DATE(CREATED) AS CREATED,
TO_DATE(MODIFIED) AS MODIFIED,
MEDICATIONFIRST_VALUE,
BGL_CALCULATION,
HYPO_OPTIONS,
HYPO_BG_THRESHOLD,
PATIENT_ADHERENCE,
TITRATION_DAYS,
DESCRIPTION,
VERSION,
COUNTRY_CODE,
CATEGORY,
NAME,
MIN_BG_VALUE1,
DOSE_CHANGE1,
CHANGE_METHOD1,
MIN_BG_VALUE2,
DOSE_CHANGE2,
CHANGE_METHOD2,
MIN_BG_VALUE3,
DOSE_CHANGE3,
CHANGE_METHOD3,
MIN_BG_VALUE4,
DOSE_CHANGE4,
CHANGE_METHOD4,
MIN_BG_VALUE5,
DOSE_CHANGE5,
CHANGE_METHOD5,
MIN_BG_VALUE6,
DOSE_CHANGE6,
CHANGE_METHOD6,
MIN_BG_VALUE7,
DOSE_CHANGE7,
CHANGE_METHOD7,
STATUS,
SOURCE FROM DF_RWD_DEV.PRJ_MDC_DWH.DWH_DOSEPLANTEMPLATE)"""

cur.execute(insert_sql)


conn.commit()


cur.close()
conn.close()
